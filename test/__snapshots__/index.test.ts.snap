// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`should match snapshots > .env.local 1`] = `
"HTTPS_PROXY = http://127.0.0.1:7890
"
`;

exports[`should match snapshots > .npmrc 1`] = `
"shamefully-hoist = true
auto-install-peers = true
strict-peer-dependencies = false
"
`;

exports[`should match snapshots > .zshrc 1`] = `
"plugins=(
  git
  gitcd
  zsh-autosuggestions
  zsh-syntax-highlighting
  wakatime
)
"
`;

exports[`should match snapshots > base.ts 1`] = `
"import { type Config, type Options } from 'prettier';
import { defineConfig, extendConfig, withSortPlugin } from '../../src/utils';

const obj = /** @type {const} */ {
  name: 'test',
};

const i = 0;

const message =
  i % 3 === 0 && i % 5 === 0
    ? 'fizzbuzz'
    : i % 3 === 0
      ? 'fizz'
      : i % 5 === 0
        ? 'buzz'
        : i % 6 === 0
          ? 'foo'
          : String(i);
"
`;

exports[`should match snapshots > hosts 1`] = `
"##
# Host Database
#
# localhost is used to configure the loopback interface
# when the system is booting.  Do not change this entry.
##
127.0.0.1 localhost
255.255.255.255 broadcasthost
::1 localhost
"
`;

exports[`should match snapshots > package.json 1`] = `
"{
  "name": "my-awesome-project",
  "version": "1.0.0",
  "dependencies": {
    "sort-object-keys": "1.0.0",
    "sort-package-json": "1.0.0"
  }
}
"
`;

exports[`should match snapshots > schema.prisma 1`] = `
"generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  title     String
  content   String?
  published Boolean   @default(false)
  User      User      @relation(fields: [authorId], references: [id])
  authorId  Int
  Comment   Comment[]
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  User   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int       @id @default(autoincrement())
  email   String    @unique
  name    String?
  Post    Post[]
  Profile Profile?
  Comment Comment[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String
  author  User   @relation(fields: [userId], references: [id])
  post    Post   @relation(fields: [postId], references: [id])
  userId  Int
  postId  Int
}
"
`;

exports[`should match snapshots > test.json 1`] = `
"{
  "0": null,
  "a": null,
  "b": null,
  "exampleNestedObject": {
    "a": null,
    "z": null
  },
  "z": null
}
"
`;

exports[`should match snapshots > test.nginx 1`] = `
"server {
  # server definition
  listen      443 ssl;
  listen      [::]:443 ssl;
  server_name example.com;

  location / {
    proxy_pass         http://proxy;
    proxy_set_header   Host $http_host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_read_timeout 1000;
  }
  # end server definition
}"
`;

exports[`should match snapshots > test.php 1`] = `
"<?php
array_map(
  function ($arg1, $arg2) use ($var1, $var2) {
    return $arg1 + $arg2 / ($var + $var2);
  },
  [
    'complex' => 'code',
    'with' => function () {
      return 'inconsistent';
    },
    'formatting' => 'is',
    'hard' => 'to',
    'maintain' => true,
  ],
);
"
`;

exports[`tailwindcss classes should sorted 1`] = `
"const tw = String.raw;
const clsx = (...args: any) => args;
const twMerge = clsx;
const twJoin = clsx;

export const classes = clsx('rounded bg-blue-500 px-4 py-2 text-base text-white', {
  'bg-blue-700 text-gray-100': true,
});

export const styles = {
  root: tw\`text-md text-black dark:text-white\`,
  base: twMerge(['relative z-[1]', twJoin('absolute inset-0 flex items-center')]),
};

export function Callout({ children }: React.PropsWithChildren) {
  return (
    <label
      className="shadow-panel can-hover:hover:border-primary mx-auto flex max-w-md cursor-pointer flex-col
items-center justify-center gap-2 rounded-lg border-2 border-dashed border-transparent bg-white p-8 transition
[view-transition-name:upload] hover:-translate-y-1 active:scale-95"
    >
      {children}
    </label>
  );
}
"
`;

exports[`tailwindcss classes should sorted 2`] = `
"<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <h1>Hello world!</h1>

    <p class:list={['text-md text-black dark:text-white', 'absolute inset-0 flex items-center']}>
      Hello world!<br /> This is HTML5 Boilerplate.
    </p>
  </body>
</html>
"
`;

exports[`tailwindcss classes should sorted 3`] = `
"@extends('frontend.layouts.app')
@section('title') foo
@endsection
@section('content')
  <section id="content">
    <div class="mod-users-pd-h container">
      <div class="pf-user-header">
        <div></div>
        <p>@lang('users.index')</p>
      </div>
      <div class="pf-users-branch">
        <ul class="pf-users-branch__list">
          @foreach ($users as $user)
            <li>
              <img
                alt="branch_arrow"
                src="{{ asset('img/frontend/icon/branch-arrow.svg') }}"
              >
              {{ link_to_route('frontend.users.user.show', $users['name'], $users['_id']) }}
            </li>
          @endforeach
        </ul>
        <div class="pf-users-branch__btn">
          @can('create', App\\Models\\User::class)
            {!! link_to_route('frontend.users.user.create', __('users.create'), [1, 2, 3], ['class' => 'btn']) !!}
          @endcan
        </div>
      </div>
    </div>
    <p
      class="text-md text-black dark:text-white"
      style="margin-top: 30px;"
    >Hello world!<br> This is HTML5 Boilerplate.</p>
  </section>
@endsection
@section('footer')
@stop
"
`;
